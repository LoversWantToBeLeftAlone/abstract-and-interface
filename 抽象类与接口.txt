抽象类遵循的规则：
1.abstract关键字只可以修饰类和方法，不能修饰字段；
2.抽象类不能被实例化，只能被继承；
3.抽象类可以包含属性，方法，构造方法，初始化块，内部类，枚举类，和普通类一样，普通方法一定要实现，变量可以初始化也可以不初始化但是不能初始化后再抽象类中重新复制或者操作该变量；
4.抽象类中的抽象方法不能实现；
5.含有抽象方法的类必须定义为抽象类；


与接口的区别：
1.接口使公开的，里面不能有私有的方法或变量。而抽象类可以有；
2.abstract在Java中代表一种继承关系，一个类只可以使用一次继承，但是却可以实现多个接口；
3.在abstract class中可以有自己的数据成员，也可以有非abstract的成员方法。而在interface中只能够有静态的不能被修改的数据成员（也就是static final的），所有的成员方法默认都是public abstract类型的。
4.实现接口必须实现接口中定义的所有方法，而实现抽象类可以有选择的重写需要用到的方法，一般的应用里，最顶级的是接口。
5.抽象类可以有非抽象方法，接口中不能有实现方法。
6.接口中定义的变量默认是public static final的，且必须给初始值，所有实现类中不能重定义也不能改变其值，抽象类的变量默认是‘friendly’的，其值可以在子类中重新定义，也可以在子类中重新赋值。


继承：
1.子类的构造过程中必须调用父类的构造方法。如果我们不写构造方法，那么编译器会帮我们加一个默认构造方法，但是如果自己写了构造方法，那么编译器就不会给你加了。所以有时候new一个对象的时候，肯定调用了子类的构造方法。但是如果自乐构造方法我们并没有显示的调用基类的构造方法，如super，这样就会调用父类没有参数的构造方法。
2.如果子类没有定义构造方法,则调用父类的无参数的构造方法,.
3.如果子类定义了构造方法,不论是无参数还是带参数,在创建子类的对象的时候,首先执行父类无参数的构造方法,然后执行自己的构造方法。
4.如果子类调用父类带参数的构造方法,可以通过super(参数)调用所需要的父类的构造方法,切该语句做为子类构造方法中的第一条语句。
4.如果某个构造方法调用类中的其他的构造方法,则可以用this(参数),切该语句放在构造方法的第一条.