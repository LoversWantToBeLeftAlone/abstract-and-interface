1.ArrayList和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，都运行按照序号索引元素，但是插入的时候要设计数组元素移动等内存操作，所以插入慢。Vector因为使用了synchrnized方法(线程安全)，通常性能上比ArrayList差，而LinkedList使用双向链表实现存储，按序号索引数需要向前或者向后遍历，但是插入时候快；
2.数组转化为题：
	Object[]object=new Person[2];
	Person[]person=new Person[3];
	person=(Person[])object;
3.final用来申明属性，方法和类，表示不可变，如果是基本类型说明变量本不可改变，如果是应用类型说明不可以指向其他的对象，但是对象还是可以改变；
4.finalize是Object类的一个方法，在垃圾回收器执行的时候会调用被回收对象的此方法。可以覆盖这个方法提供垃圾收集时的其他资源回收，例如关闭文件等；
5.HashMap是HashTable的轻量级实现(非线程安全的实现），都实现了Map接口，主要区别在于HashMap允许出现空k-v，但是hashTable不允许。
6.GC是垃圾回收器。
7.String s=new String("ss");创建了两个String Object，一个是对象，一个是对象的引用；
8.Math.round()总是返回接近0的数；
9.sleep和wait的区别；
10.error是错误，程序不必处理的异常，我们无法处理。但是Exception表示可以捕捉或者需要程序进行处理的异常；
11.抽象类可以有也可以没抽象方法，并且可以定义和常规类一样的变量和方法。而接口中所有的方法都是抽象的，所有的变量都是静态不可修改的。
12.接口可以继承接口。抽象类可以实现接口，接口间继承不可实现。但是接口不能实现抽象类，抽象类间也用继承。
13.关于线程：start()方法不意味着线程会立即运行，只是马上进入了可运行状态。直接调用run()方法不会尝试线程，而是把它当做普通的方法调用，马上执行。
14.Class.forName()：调用该访问，返回一个类名为指定字符串的类的对象。
15.多态：要有继承要有重写，父类引用指向子类对象。对象类型多态，消息多态。可替换性，可扩充性，接口性，灵活性和简化性。